/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package net.pixlib.ioc.parser {	import net.pixlib.collections.PXIterable;	import net.pixlib.ioc.parser.factory.PXASPreProcessorParser;	import net.pixlib.ioc.parser.factory.PXParserCommand;	/**	 * Stores IoC context parser commands.	 * 	 * @author Romain Ecarnot	 */	public interface PXParserCollection extends PXIterable	{		/**		 * Adds passed-in <code>parser</code> command before passed-in 		 * <code>searchParser</code> one. 		 * 		 * <p><code>searchParser</code> must be registered in collection to find 		 * his position.<br />		 * The <code>parser</code> is added after 		 * <code>searchParser</code> parser.</p>		 * 		 * @param	searchParser	ParserCommand to search		 * @param	parser			ParserCommand to add after <code>searchParser</code> 		 * 							parser.		 * 							 * @return	<code>true</code> if <code>command</code> is was successfully inserted.		 */		function addParserBefore( searchParser : PXParserCommand, parser : PXParserCommand ) : Boolean				/**		 * Adds passed-in <code>parser</code> command after passed-in 		 * <code>searchParser</code> one. 		 * 		 * <p><code>searchParser</code> must be registered in sequencer to find 		 * his position.<br />		 * The <code>parser</code> is added after 		 * <code>searchParser</code> parser.</p>		 * 		 * @param	searchParser	ParserCommand to search		 * @param	parser			ParserCommand to add after <code>searchParser</code> 		 * 							parser.		 * 							 * @return	<code>true</code> if <code>command</code> is was successfully inserted.		 */		function addParserAfter( searchParser : PXParserCommand, parser : PXParserCommand ) : Boolean				/**		 * Adds passed-in parser in first position in sequencer.		 * 		 * @param	parser	ParserCommand to add		 * 		 * @return	<code>true</code> if <code>parser</code> is was successfully inserted.		 */		function addParserStart( parser : PXParserCommand ) : Boolean				/**		 * Adds passed-in parser at last position in sequencer.		 * 		 * @param	parser	ParserCommand to add		 * 		 * @return	<code>true</code> if <code>parser</code> is was successfully inserted.		 */		function addParserEnd( parser : PXParserCommand ) : Boolean				/**		 * Removes passed-in <code>parser</code> command from collection.		 * 		 * @param parser	ParserCommand to remove from collection		 * 		 * @returns <code>true</code> if command is successfully removed		 */		function removeParser( parser : PXParserCommand ) : Boolean				/**		 * Returns Hard coded AS3 ASPreProcessorParser		 */		function getASPreProcessor( ) : PXASPreProcessorParser;				/**		 * Releases parsers collection.		 *		 * @langversion 3.0		 * @playerversion Flash 10		 * @playerversion AIR 1.5		 */		function release() : void;	}}