/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package net.pixlib.ioc.parser.factory {	import net.pixlib.commands.PXCommand;	import net.pixlib.events.PXCommandEvent;	import net.pixlib.ioc.load.PXApplicationLoaderState;	import net.pixlib.ioc.parser.factory.processor.PXContextProcessorBatch;	import net.pixlib.ioc.parser.factory.processor.PXContextProcessorEvent;	import net.pixlib.ioc.parser.factory.processor.PXMethodProcessor;	import net.pixlib.ioc.parser.factory.processor.PXPropertyProcessor;	import flash.events.Event;	/**	 * @private	 * 	 * @author Romain Ecarnot	 */	public class PXASPreProcessorParser extends PXAbstractParserCommand	{		//--------------------------------------------------------------------		// Private properties		//--------------------------------------------------------------------		private var _oBatchProcessor : PXContextProcessorBatch;				//--------------------------------------------------------------------		// Public API		//--------------------------------------------------------------------				/**		 * 		 */		public function PXASPreProcessorParser()		{			super();						_oBatchProcessor = new PXContextProcessorBatch();		}		/**		 * Adds a variable replacement parsing.		 */		public function addVariable( name : String, value : *, flashvarName : String = null ) : void		{			_oBatchProcessor.addCommand(new PXPropertyProcessor(name, value, flashvarName));		}		/**		 * Adds a method call parsing.		 */		public function addMethod( method : Function, args : Array ) : void		{			_oBatchProcessor.addCommand(new PXMethodProcessor(method, args));		}		/**		 * Adds a processor parsing.		 */		public function addProcessor( processor : PXCommand ) : void		{			_oBatchProcessor.addCommand(processor);		}		/**		 * @inheritDoc		 */		override public function parse( ) : void		{			if(_oBatchProcessor.size() > 0)			{				_oBatchProcessor.addEventListener(PXCommandEvent.onCommandEndEVENT, onBatchCompleteHandler);				_oBatchProcessor.execute(new PXContextProcessorEvent(PXContextProcessorEvent.onProcessEVENT, null, getContextData()));			}			else fireCommandEndEvent();		}				//--------------------------------------------------------------------		// Protected methods		//--------------------------------------------------------------------				/**		 * @inheritDoc		 */		override protected function getState(  ) : String		{			return PXApplicationLoaderState.PREPROCESSOR_PARSE_STATE;		}		/**		 *		 */		protected function onBatchCompleteHandler(event : Event) : void		{			_oBatchProcessor.removeEventListener(PXCommandEvent.onCommandEndEVENT, onBatchCompleteHandler);			_oBatchProcessor.removeAll();						setContextData(_oBatchProcessor.getContext());						fireCommandEndEvent();		}			}}